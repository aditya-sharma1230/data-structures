#include <stdio.h>
#include <stdlib.h>
typedef struct Node
{
 int data;
 struct Node *next;
} Node;
void displayList(Node *node)
{
 printf("\nLinked List: ");
 while (node != NULL)
 {
 printf("%d -> ", node->data);
 node = node->next;
 }
 printf("NULL\n");
}
void insertAtBeginning(Node **head, int value)  {
 Node *newNode = (Node *)malloc(sizeof(Node));   newNode->data = value;
 newNode->next = *head;
 *head=newNode;
}
void insertAtPosition(Node **head, int position, int value)  {
 if (position < 1)
 {
 printf("Invalid position.\n");
 return;
 }
 Node *newNode = (Node *)malloc(sizeof(Node));   newNode->data = value;
 if (position == 1)
 {
 newNode->next = *head;
 return;
 }
 Node *current = *head;
 for (int i = 1; i < position - 1 && current != NULL; i++)   {
 current = current->next;
 }
 if (current == NULL)
 {
 printf("Position out of bounds.\n");
 return;
 }
 newNode->next = current->next;
 current->next = newNode;
 return;
}
void insertAtEnd(Node **head, int value)
{
 Node *newNode = (Node *)malloc(sizeof(Node));   newNode->data = value;
 newNode->next = NULL;
 if (*head == NULL)
 {
 *head=newNode;
 return;
 }
 Node *current = *head;
 while (current->next != NULL)
 {
 current = current->next;
 }
 current->next = newNode;
 return;
}
int main()
{
 Node *head = NULL;
 printf("Enter the Linked List Insert Operation : \n 1. At Beginning \n 2. At Given Position  \n 3. At End \n");
 printf("Enter 4 to Exit Insertion and Display List..\n");
 int value,choice,run=1;


 while(run){
 printf("\nEnter Choice : ");
 scanf("%d", &choice);
 switch (choice)
 {
 case 1:
 printf("\nEnter Value to be Inserted : ");   scanf("%d", &value);
 insertAtBeginning(&head, value);   break;
 case 2:
 printf("\nEnter Value to be Inserted : ");   scanf("%d", &value);
 printf("Enter The Position : ");   int posi;
 scanf("%d", &posi);
 insertAtPosition(&head, posi, value);   break;
 case 3:
 printf("\nEnter Value to be Inserted : ");   scanf("%d", &value);
 insertAtEnd(&head, value);
 break;
 case 4:
 run=0;
 break;
 default:
 printf("Wrong Choice Entered ....");   break;
 }
 }
 displayList(head);
 return 0;
}
