//WAP to Implement doubly link list with primitive operations
//a) Create a doubly linked list.
//b) Insert a new node to the left of the node.
//c) Delete the node based on a specific value.
//d) Display the contents of the list.

#include <stdio.h>
#include <stdlib.h>
typedef struct Node
{
int data;
struct Node *next;
struct Node *prev;
} Node;
void displayList(Node *node)
{
printf("\nDoubly Linked List :: \n");
while (node != NULL)
{
printf("%d ->", node->data);
node = node->next;
}
printf("NULL\n");
}
void insertAtStart(Node **head, int value)
{
Node *newNode = (Node *)malloc(sizeof(Node));
newNode->data = value;
newNode->prev = NULL;
newNode->next = NULL;
printf("\nInserting Value %d At Start\n",value);
if (*head == NULL)
{
*head = newNode;
return;
}
newNode->next = *head;
(*head)->prev = newNode;
*head = newNode;
}
void deleteValue(Node **head, int value)
{
if (*head == NULL)
{
printf("\nList is Empty..");
return;
}
Node *current = *head;
while (current->next->data != value)
{
current = current->next;
}
printf("\nDeleting Value - %d\n",value);
Node *ptr = current->next;
current->next->next->prev = current;
current->next = current->next->next;
free(ptr);

}
int main()
{
// Write C code here
Node *head = NULL;
insertAtStart(&head, 20);
insertAtStart(&head, 40);
insertAtStart(&head, 50);
insertAtStart(&head, 60);
displayList(head); 
deleteValue(&head, 50);
displayList(head);
return 0;
}
