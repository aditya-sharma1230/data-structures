#include <stdio.h>

void bfs(int a[20][20], int n, int src, int t[20][2], int s[])  
{  
    int f, r, q[20], u, v, k = 0, i;  
    // Initialize the visited array to 0
    for(i = 0; i < n; i++)  
        s[i] = 0;  
    f = r = 0;  
    q[r] = src;  
    s[src] = 1;  // Mark the source as visited
    
    while(f <= r)  
    {  
        u = q[f++];  
        for(v = 0; v < n; v++)  
        {  
            if(a[u][v] == 1 && s[v] == 0)  
            {  
                s[v] = 1;  
                q[++r] = v;  
                t[k][0] = u;  
                t[k][1] = v;  
                k++;  
            }  
        }  
    }  
}  

int main()  
{  
    int n, a[20][20], src, t[20][2], flag, s[20], i, j;  
    
    // Input the number of nodes
    printf("Enter the number of nodes\n");  
    scanf("%d", &n);  
    
    // Input the adjacency matrix
    printf("Enter the adjacency matrix\n");  
    for(i = 0; i < n; i++)  
    {  
        for(j = 0; j < n; j++)  
            scanf("%d", &a[i][j]);  
    }  
    
    // Input the source node
    printf("Enter the source\n");  
    scanf("%d", &src);  
    
    // Perform BFS traversal
    bfs(a, n, src, t, s);  
    
    flag = 0;  
    // Check for unreachable nodes
    for(i = 0; i < n; i++)  
    {  
        if(s[i] == 0)  
        {  
            printf("Vertex %d is not reachable\n", i);  
            flag = 1;  
        }  
        else  
            printf("Vertex %d is reachable\n", i);  
    }  
    
    if(flag == 1)  
        printf("Some nodes are not visited\n");  
    else  
    {  
        // Print the BFS traversal edges
        printf("The BFS traversal is:\n");  
        for(i = 0; i < 20 && t[i][0] != 0; i++)  
            printf("%d -> %d\n", t[i][0], t[i][1]);  
    }  
    
    return 0;  
}  
